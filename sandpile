#!/usr/bin/env python3

import numpy as np
from PIL import Image
from collections import defaultdict
from operator import itemgetter
import sys, random

class Sandpile:
    CELL_LIMIT = 3

    def __init__(self, num_grains):
        # Use dict instead of 2D array so grid can grow infinitely
        self.grid = defaultdict(int)
        self.unstable = {(0, 0): num_grains}

    def topple(self):
        try:
            # Find a cell larger than CELL_LIMIT, and distribute to neighbours
            ((i, j), grains) = self.unstable.popitem()
            self.increment_neighbours(i, j, grains // (self.CELL_LIMIT+1))
            grains %= (self.CELL_LIMIT + 1)
            self.grid[(i, j)] = grains
        except KeyError:
            return

    def increment_neighbours(self, i, j, inc_value):
        neighbours = [(0, -1), (-1, 0), (1, 0), (0, 1)]
        for x, y in neighbours:
            nbr = (i+x, j+y)
            if nbr in self.unstable:
                self.unstable[nbr] += inc_value
            else:
                self.grid[nbr] += inc_value
                if self.grid[nbr] > self.CELL_LIMIT:
                    grains = self.grid.pop(nbr)
                    self.unstable[nbr] = grains

    def stable(self):
        return (not self.unstable)

    # Convert dict into 2D array
    def getgrid(self):
        min_x = min(self.grid.keys(), key=itemgetter(0))[0]
        min_y = min(self.grid.keys(), key=itemgetter(1))[1]
        max_x = max(self.grid.keys(), key=itemgetter(0))[0]
        max_y = max(self.grid.keys(), key=itemgetter(1))[1]
        matrix = np.zeros((max_x - min_x + 1, max_y - min_y + 1), dtype=int)
        for i in range(len(matrix)):
            for j in range(len(matrix[0])):
                matrix[i, j] = self.grid[(i + min_x, j + min_y)]
        return matrix

    def sum_pile():
        return sum(self.grid.values())


def colourgrid(grid, colours):
    newgrid = np.zeros((len(grid), len(grid[0]), 3), dtype=np.uint8)
    for i in range(len(newgrid)):
        for j in range(len(newgrid[0])):
            newgrid[i, j] = colours[grid[i, j]]
    return newgrid

num_grains = 100
try:
    num_grains = int(sys.argv[1])
except Exception:
    pass

print("Using {} grain(s).".format(num_grains))
print("Toppling sandpile...")

sp = Sandpile(num_grains)

while not sp.stable():
    sp.topple()

print("...sandpile stable.")
print("Converting sandpile to image...")

#print(sp.sum_pile())

colours = [(41, 128, 185), (22, 160, 133), (142, 68, 173), (52, 73, 94)]
random.shuffle(colours)
img = Image.fromarray(colourgrid(sp.getgrid(), colours), 'RGB')
img.save('sandpile{}.png'.format(num_grains))
img.show()

print("...image created.")
